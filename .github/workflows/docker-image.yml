name: Docker Gateway Image CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: gateway-image
      IMAGE_TAG: ${{ github.run_number }}
    outputs:
      image_name: ${{ env.IMAGE_NAME }}
      image_tag: ${{ env.IMAGE_TAG }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    env:
      IMAGE_NAME: ${{ needs.build.outputs.image_name }}
      IMAGE_TAG: ${{ needs.build.outputs.image_tag }}
    steps:
      - name: Deploy to Ubuntu server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Check if docker is accessible
            if ! docker info > /dev/null 2>&1; then
              echo "‚ùå Docker permission denied. Please add user to docker group:"
              echo "sudo usermod -aG docker $USER"
              echo "Then log out and back in"
              exit 1
            fi
            
            # Pull the latest image
            echo "üîÑ Pulling image..."
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            # Stop existing container (if exists)
            if docker ps -q -f name=gateway-container | grep -q .; then
              echo "üõë Stopping existing container..."
              docker stop gateway-container
            fi
            
            # Remove existing container (if exists)  
            if docker ps -aq -f name=gateway-container | grep -q .; then
              echo "üóëÔ∏è Removing existing container..."
              docker rm gateway-container
            fi
            
            # Run new container
            echo "üöÄ Starting new container..."
            docker run -d \
              --name gateway-container \
              --restart unless-stopped \
              -p 3000:80 \
              ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
            
            # Verify container is running
            if docker ps | grep -q gateway-container; then
              echo "‚úÖ Container started successfully"
            else
              echo "‚ùå Container failed to start"
              docker logs gateway-container
              exit 1
            fi
            
            # Clean up old images (keep last 3 versions)
            echo "üßπ Cleaning up old images..."
            docker images ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }} --format "{{.ID}} {{.Tag}}" | tail -n +4 | awk '{print $1}' | xargs -r docker rmi || echo "No old images to remove"

      - name: Health check
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            # Wait for container to start
            sleep 10
            
            # Check if container is running
            if docker ps | grep -q gateway-container; then
              echo "‚úÖ Container is running"
            else
              echo "‚ùå Container is not running"
              exit 1
            fi
            
            # Test HTTP response (adjust URL/port as needed)
            for i in {1..5}; do
              if curl -f http://localhost:3000 > /dev/null 2>&1; then
                echo "‚úÖ Application is responding"
                exit 0
              fi
              echo "Attempt $i failed, retrying in 5 seconds..."
              sleep 5
            done
            
            echo "‚ùå Application health check failed"
            exit 1